{"version":3,"sources":["webpack:///./src/templates/blog-list.js"],"names":["BlogIndex","render","data","this","props","siteTitle","site","siteMetadata","title","siteKeywords","keywords","posts","allMarkdownRemark","edges","pageContext","currentPage","numPages","isFirst","isLast","prevPage","toString","nextPage","location","map","node","frontmatter","fields","slug","key","style","marginBottom","rhythm","boxShadow","to","date","dangerouslySetInnerHTML","__html","excerpt","display","flexWrap","justifyContent","alignItems","listStyle","padding","rel","Array","from","length","_","i","margin","textDecoration","color","background","React","Component","pageQuery"],"mappings":"6QAQMA,E,gLACJC,OAAA,WAAU,IACAC,EAASC,KAAKC,MAAdF,KACFG,EAAYH,EAAKI,KAAKC,aAAaC,MACnCC,EAAeP,EAAKI,KAAKC,aAAaG,SACtCC,EAAQT,EAAKU,kBAAkBC,MAJ9B,EAK2BV,KAAKC,MAAMU,YAArCC,EALD,EAKCA,YAAaC,EALd,EAKcA,SACfC,EAA0B,IAAhBF,EACVG,EAASH,IAAgBC,EACzBG,EAAWJ,EAAc,GAAM,EAAI,IAAxB,KAAmCA,EAAc,GAAGK,WAC/DC,EAAQ,KAAQN,EAAc,GAAGK,WAEvC,OACE,kBAAC,IAAD,CAAQE,SAAUnB,KAAKC,MAAMkB,SAAUd,MAAOH,GAC5C,kBAAC,IAAD,CAAKG,MAAOH,EAAWK,SAAUD,IACjC,kBAAC,IAAD,MACCE,EAAMY,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACNhB,EAAQgB,EAAKC,YAAYjB,OAASgB,EAAKE,OAAOC,KACpD,OACE,yBAAKC,IAAKJ,EAAKE,OAAOC,MACpB,wBACEE,MAAO,CACLC,aAAcC,YAAO,EAAI,KAG3B,kBAAC,OAAD,CAAMF,MAAO,CAAEG,UAAU,QAAWC,GAAIT,EAAKE,OAAOC,MACjDnB,IAGL,+BAAQgB,EAAKC,YAAYS,MACzB,uBAAGC,wBAAyB,CAAEC,OAAQZ,EAAKa,eAIjD,wBACER,MAAO,CACLS,QAAS,OACTC,SAAU,OACVC,eAAgB,gBAChBC,WAAY,SACZC,UAAW,OACXC,QAAS,KAGT1B,GACA,kBAAC,OAAD,CAAMgB,GAAId,EAAUyB,IAAI,QAAxB,mBAIDC,MAAMC,KAAK,CAAEC,OAAQ/B,IAAY,SAACgC,EAAGC,GAAJ,OAChC,wBACErB,IAAG,qBAAsBqB,EAAI,GAC7BpB,MAAO,CACLqB,OAAQ,IAGV,kBAAC,OAAD,CACEjB,GAAE,KAAY,IAANgB,EAAU,GAAKA,EAAI,GAC3BpB,MAAO,CACLc,QAASZ,YAAO,EAAI,GACpBoB,eAAgB,OAChBC,MAAOH,EAAI,IAAMlC,EAAc,UAAY,GAC3CsC,WAAYJ,EAAI,IAAMlC,EAAc,UAAY,KAGjDkC,EAAI,QAIT/B,GACA,kBAAC,OAAD,CAAMe,GAAIZ,EAAUuB,IAAI,QAAxB,kB,GAtEYU,IAAMC,WAgFfvD,YAER,IAAMwD,EAAS","file":"component---src-templates-blog-list-js-36c32651bc9f7ee3b007.js","sourcesContent":["import React from 'react'\nimport { Link, graphql } from 'gatsby'\n\nimport Bio from '../components/bio'\nimport Layout from '../components/layout'\nimport SEO from '../components/seo'\nimport { rhythm } from '../utils/typography'\n\nclass BlogIndex extends React.Component {\n  render() {\n    const { data } = this.props\n    const siteTitle = data.site.siteMetadata.title\n    const siteKeywords = data.site.siteMetadata.keywords\n    const posts = data.allMarkdownRemark.edges\n    const { currentPage, numPages } = this.props.pageContext\n    const isFirst = currentPage === 1\n    const isLast = currentPage === numPages\n    const prevPage = currentPage - 1 === 1 ? '/' : `/${(currentPage - 1).toString()}`\n    const nextPage = `/${(currentPage + 1).toString()}`\n\n    return (\n      <Layout location={this.props.location} title={siteTitle}>\n        <SEO title={siteTitle} keywords={siteKeywords} />\n        <Bio />\n        {posts.map(({ node }) => {\n          const title = node.frontmatter.title || node.fields.slug\n          return (\n            <div key={node.fields.slug}>\n              <h3\n                style={{\n                  marginBottom: rhythm(1 / 4),\n                }}\n              >\n                <Link style={{ boxShadow: `none` }} to={node.fields.slug}>\n                  {title}\n                </Link>\n              </h3>\n              <small>{node.frontmatter.date}</small>\n              <p dangerouslySetInnerHTML={{ __html: node.excerpt }} />\n            </div>\n          )\n        })}\n        <ul\n          style={{\n            display: 'flex',\n            flexWrap: 'wrap',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n            listStyle: 'none',\n            padding: 0,\n          }}\n        >\n          {!isFirst && (\n            <Link to={prevPage} rel=\"prev\">\n              ← Previous Page\n            </Link>\n          )}\n          {Array.from({ length: numPages }, (_, i) => (\n            <li\n              key={`pagination-number${i + 1}`}\n              style={{\n                margin: 0,\n              }}\n            >\n              <Link\n                to={`/${i === 0 ? '' : i + 1}`}\n                style={{\n                  padding: rhythm(1 / 4),\n                  textDecoration: 'none',\n                  color: i + 1 === currentPage ? '#ffffff' : '',\n                  background: i + 1 === currentPage ? '#4078c0' : '',\n                }}\n              >\n                {i + 1}\n              </Link>\n            </li>\n          ))}\n          {!isLast && (\n            <Link to={nextPage} rel=\"next\">\n              Next Page →\n            </Link>\n          )}\n        </ul>\n      </Layout>\n    )\n  }\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query blogPageQuery($skip: Int!, $limit: Int!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      limit: $limit\n      skip: $skip\n    ) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n          }\n        }\n      }\n    }\n  }\n`"],"sourceRoot":""}