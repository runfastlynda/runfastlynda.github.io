{"componentChunkName":"component---src-templates-blog-post-js","path":"/2016-05-12-how-to-use-page-visibility-api/","result":{"data":{"site":{"siteMetadata":{"title":"runfastlynda"}},"markdownRemark":{"id":"d2768ee3-ca74-5f15-b228-50358381b63a","excerpt":"Page Visibility API是HTML5中简单又实用的API之一。 不知道用户是不是在与页面交互，这是困扰广大Web开发人员的一个主要问题。如果页面最小化了或者隐藏在了其他标签页后面，那么有些功能是可以停下来的，比如轮询服务器或者某些动画效果。那么如何判断呢？ H5之前，我们可以监听onfocus…","html":"<p>Page Visibility API是HTML5中简单又实用的API之一。</p>\n<p>不知道用户是不是在与页面交互，这是困扰广大Web开发人员的一个主要问题。如果页面最小化了或者隐藏在了其他标签页后面，那么有些功能是可以停下来的，比如轮询服务器或者某些动画效果。那么如何判断呢？</p>\n<p>H5之前，我们可以监听onfocus()事件。如果当前窗口得到焦点，那么我们可以简单认为用户在与该页面交互，如果失去焦点（onblur()），那么可以认为用户停止与该页面交互。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// 当前窗口得到焦点\nwindow.onfocus = function() {\n  // 动画开始\n};\n\n// 当前窗口失去焦点\nwindow.onblur = function() {\n  // 停止动画\n};</code></pre></div>\n<p>但是这样的方法显然是很 “粗糙” 的。浏览器失去焦点，不意味着用户没在与页面交互，H5引入的Page Visibility API，能很有效地帮助我们完成这样的判断。</p>\n<p>这个API本身非常简单，由以下三部分组成。</p>\n<p>document.hidden：表示页面是否隐藏的布尔值。页面隐藏包括 页面在后台标签页中 或者 浏览器最小化（注意，页面被其他软件遮盖并不算隐藏，比如打开的 sublime 遮住了浏览器）</p>\n<p>document.visibilityState：表示下面 4 个可能状态的值</p>\n<ul>\n<li>hidden：页面在后台标签页中或者浏览器最小化</li>\n<li>visible：页面在前台标签页中</li>\n<li>prerender：页面在屏幕外执行预渲染处理 document.hidden 的值为 true</li>\n<li>unloaded：页面正在从内存中卸载</li>\n</ul>\n<p>Visibilitychange事件：当文档从可见变为不可见或者从不可见变为可见时，会触发该事件。</p>\n<p>这样，我们可以监听Visibilitychange事件，当该事件触发时，获取document.hidden的值，根据该值进行页面一些事件的处理。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">document.addEventListener(&#39;visibilitychange&#39;, function() {\n  var isHidden = document.hidden;\n  if (isHidden) {\n    // 动画停止\n  } else {\n    // 动画开始\n  }\n});</code></pre></div>\n<h3>实际运用：</h3>\n<p>下面是一个根据页面可见性更改title的例子，特别有趣，实现效果如下：</p>\n<p>当我选择其他tag时，它的title显示为如下：</p>\n<p><img src=\"../../../../img/page2.png\"></p>\n<p>当我选择当前页面，它的title显示如下：</p>\n<p><img src=\"../../../../img/page1.png\"></p>\n<p>废话不说，直接上代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//考虑了兼容性\nvar glb = {\n  d: document,\n  addEvent: function(a, b, c, d) {\n    if (a.addEventListener) {\n      a.addEventListener(b, c, d)\n    } else if (a.attachEvent) {\n      a.attachEvent(&#39;on&#39; + b, c)\n    }\n  },\n  delEvent: function(a, b, c, d) {\n    if (a.removeEventListener) {\n      a.removeEventListener(b, c, d)\n    } else if (a.detachEvent) {\n      a.detachEvent(&#39;on&#39; + b, c)\n    }\n  }\n};\nglb.stateEvent = function() {\n  if (glb.d.visibilityState == &#39;prerender&#39;) {\n    glb.d.title = &#39;预渲染中....&#39;;\n  }\n  if (glb.d.visibilityState == &#39;visible&#39;) {\n    glb.d.title = &#39;你可以看到我哦~&#39;;\n  }\n  if (glb.d.visibilityState == &#39;hidden&#39;) {\n    glb.d.title = &#39;你看不到我了!&#39;;\n  };\n}\nglb.stateEvent();\nglb.addEvent(glb.d, &#39;visibilitychange&#39;, glb.stateEvent, false);</code></pre></div>","frontmatter":{"title":"活学活用页面可见性","date":"May 12, 2016"},"fields":{"slug":"/2016-05-12-how-to-use-page-visibility-api/"}}},"pageContext":{"slug":"/2016-05-12-how-to-use-page-visibility-api/","previous":{"fields":{"slug":"/2016-03-12-use-border-make-triangle/"},"frontmatter":{"title":"巧用border实现梯形和三角形","tags":null}},"next":{"fields":{"slug":"/2016-07-04-read-html5-boilerplate/"},"frontmatter":{"title":"读源码：HTML5 Boilerplate","tags":null}}}}}