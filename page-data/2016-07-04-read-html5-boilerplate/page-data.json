{"componentChunkName":"component---src-templates-blog-post-js","path":"/2016-07-04-read-html5-boilerplate/","result":{"data":{"site":{"siteMetadata":{"title":"runfastlynda"}},"markdownRemark":{"id":"04f192a6-7bb4-55ed-969e-c4c7919c352d","excerpt":"很多人都推荐使用HTML5 Boilerplate…","html":"<p>很多人都推荐使用HTML5 Boilerplate作为项目的默认模板，所以周末特意花了些时间研究了一下。使用方法本文就不赘述了，主要是阅读源码，补充自己的不足。</p>\n<h3>目录结构</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.\n├── css\n│   ├── main.css\n│   └── normalize.css\n├── doc\n├── img\n├── js\n│   ├── main.js\n│   ├── plugins.js\n│   └── vendor\n│       └── modernizr.min.js\n├── .editorconfig\n├── .htaccess\n├── 404.html\n├── apple-touch-icon.png\n├── browserconfig.xml\n├── index.html\n├── humans.txt\n├── robots.txt\n├── crossdomain.xml\n├── favicon.ico\n├── tile-wide.png\n└── tile.png</code></pre></div>\n<p>结构就是如此，简单概括一下：</p>\n<ul>\n<li><code class=\"language-text\">404.html</code>、<code class=\"language-text\">index.html</code>页面不用多说什么</li>\n<li><code class=\"language-text\">css</code>，<code class=\"language-text\">img</code>，<code class=\"language-text\">js</code>文件夹中放对应的文件</li>\n<li><code class=\"language-text\">.editorconfig</code>文件定义团队代码规范</li>\n<li><code class=\"language-text\">vendor</code>目录用来保存所有的第三方库</li>\n<li><code class=\"language-text\">humans.txt</code>文件保存项目的开发团队及开发技术等信息</li>\n<li><code class=\"language-text\">robots.txt</code>文件记录对搜索引擎屏蔽的页面</li>\n<li><code class=\"language-text\">crossdamin.xml</code>是一个用作跨域请求的模板</li>\n<li><code class=\"language-text\">favicon.ico</code>，<code class=\"language-text\">tile.png</code>，<code class=\"language-text\">tile-wide.png</code> 和 <code class=\"language-text\">Apple Touch Icon</code>都是Icons文件。</li>\n</ul>\n<h3>HTML</h3>\n<p>主要是从<code class=\"language-text\">index.html</code>文件开始，首先是第一行的<code class=\"language-text\">html</code>标签中添加了<code class=\"language-text\">no-js</code>的class，这个class源于Modernizr，HTML5 Boilerplate使用了一份自定义的Modernizr。查看目录结构时其实也有看到，Modernizr是一个JavaScript库，作用是确保所有浏览器都可以使用HTML5元素，同时还会根据功能检测的结果为html元素添加不同的类名。那到底如何使用呢？我们可以基于特性的可用性来创建CSS规则（比如：隐藏），如果浏览器不支持这个新特性，那么这些规则就会自动应用到网页上。因此在这里的作用是查看浏览器是否支持JavaScript，如果不支持就显示<code class=\"language-text\">no-js</code>，如果支持就把<code class=\"language-text\">no-js</code>删掉，运行Modernizr时，它会把这个<code class=\"language-text\">no-js</code>的类变为<code class=\"language-text\">js</code>来使你知道它已经运行。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</code></pre></div>\n<p>这行代码我们常见，用于让IE使用可用的最高版本的模式，IE8用IE8模式，IE9用IE9模式。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</code></pre></div>\n<p>这段代码在开发移动端页面时，一般都会用到，含义就是不许浏览器自动对页面的进行缩放，缩放比例是1：1。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;!--[if lt IE 8]&gt;\n  &lt;p class=&quot;browserupgrade&quot;&gt;You are using an &lt;strong&gt;outdated&lt;/strong&gt; browser. Please &lt;a href=&quot;http://browsehappy.com/&quot;&gt;upgrade your browser&lt;/a&gt; to improve your experience.&lt;/p&gt;\n&lt;![endif]--&gt;</code></pre></div>\n<p>Boilerplate的内容区包含了这样一条提示，建议IE8的用户安装最新版本浏览器。</p>\n<p>最后，是一段谷歌分析代码。谷歌建议将该脚本置于文档头部。其考虑如下：如果将该脚本置于网页头部，那么即使页面未完全加载，也可以统计用户访问量，并且可以激发浏览器的最大并发连接数。之所以默认包含谷歌分析代码，是因为谷歌分析是当前最流行的追踪解决方案之一。然而，它的用法并不是一成不变的，你应该查看可替代方案，以选择最适合自己的。</p>\n<h3>CSS</h3>\n<p>其实CSS部分有一个比较常用的，就是对于Normalize.css的引用。为了确保所有浏览器的渲染效果更加一致且符合标准，引入了 Normalize.css来实现浏览器的CSS重置。</p>\n<p>Normalize.css本质上并不是重置CSS：只处理需要标准化修正的样式，保留浏览器已有的默认样式而不是全盘替换它们，修正浏览器的缺陷和常见性差异，提高可用性。相对来说，个人还是比较喜欢这种CSS reset的方式，但是需要注意的是，现在维护的normalize.cssv3对IE只支持到IE8。</p>\n<p>HTML5 Boilerplate使用媒体查询的语句进行移动和响应式设计的开发。当视窗宽度确定下来后，使用 max-width 来替代固定尺寸，比如这样来编写：<code class=\"language-text\">@media only screen and (max-width: 480px)</code>。</p>\n<h3>JS</h3>\n<p><code class=\"language-text\">plugins.js</code>文件用来包含所有的插件，比如jQuery插件和其他第三方插件。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(function() {\n    var method;\n    var noop = function () {};\n    var methods = [\n        &#39;assert&#39;, &#39;clear&#39;, &#39;count&#39;, &#39;debug&#39;, &#39;dir&#39;, &#39;dirxml&#39;, &#39;error&#39;,\n        &#39;exception&#39;, &#39;group&#39;, &#39;groupCollapsed&#39;, &#39;groupEnd&#39;, &#39;info&#39;, &#39;log&#39;,\n        &#39;markTimeline&#39;, &#39;profile&#39;, &#39;profileEnd&#39;, &#39;table&#39;, &#39;time&#39;, &#39;timeEnd&#39;,\n        &#39;timeline&#39;, &#39;timelineEnd&#39;, &#39;timeStamp&#39;, &#39;trace&#39;, &#39;warn&#39;\n    ];\n    var length = methods.length;\n    var console = (window.console = window.console || {});\n\n    while (length--) {\n        method = methods[length];\n\n        // Only stub undefined methods.\n        if (!console[method]) {\n            console[method] = noop;\n        }\n    }\n}());</code></pre></div>\n<p><code class=\"language-text\">plugins.js</code>文件默认保存了一小段代码，防止浏览器禁用console而引发的console错误。如果控制台方法不可用，那么这段代码将确保相应的方法为空函数值，防止浏览器报错。</p>\n<p>大概就是这样，每次阅读源码都会有收获。</p>","frontmatter":{"title":"读源码：HTML5 Boilerplate","date":"July 04, 2016"},"fields":{"slug":"/2016-07-04-read-html5-boilerplate/"}}},"pageContext":{"slug":"/2016-07-04-read-html5-boilerplate/","previous":{"fields":{"slug":"/2016-05-12-how-to-use-page-visibility-api/"},"frontmatter":{"title":"活学活用页面可见性","tags":null}},"next":{"fields":{"slug":"/2016-08-13-what-different-in-dependencies-and-devDependencies/"},"frontmatter":{"title":"dependencies 与 devDependencies 的区别","tags":null}}}},"staticQueryHashes":["240262808","2841359383"]}