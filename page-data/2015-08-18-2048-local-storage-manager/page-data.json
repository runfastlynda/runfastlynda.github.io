{"componentChunkName":"component---src-templates-blog-post-js","path":"/2015-08-18-2048-local-storage-manager/","result":{"data":{"site":{"siteMetadata":{"title":"runfastlynda"}},"markdownRemark":{"id":"a3a3a88b-7700-5fde-8004-e3dacb8e303a","excerpt":"前面一篇已经介绍了inputmannager.js那一部分的代码，接着想了解游戏中的状态数据是怎么存储和调用的，所以来阅读localstorage_manager.js。 localstoragemanager.js包括两个部分：window.fakeStorage和LocalStorageManager…","html":"<p><a href=\"http://runfastlynda.com/2048-input-mannager/\">前面一篇</a>已经介绍了input<em>mannager.js那一部分的代码，接着想了解游戏中的状态数据是怎么存储和调用的，所以来阅读local</em>storage_manager.js。</p>\n<p>local<em>storage</em>manager.js包括两个部分：window.fakeStorage和LocalStorageManager函数。查看到前者在LocalStorageManager函数中有调用，所以决定先阅读LocalStorageManager。</p>\n<p>LocalStorageManager函数有如下结构：\n<img src=\"http://7xjufd.dl1.z0.glb.clouddn.com/blog3.1.png\"></p>\n<p>在LocalStorageManager函数中先把 bestScoreKey和gameStateKey的键赋为bestScore 与gameState，然后使用三目运算给 storage 赋值。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">LocalStorageManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>bestScoreKey     <span class=\"token operator\">=</span> <span class=\"token string\">\"bestScore\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>gameStateKey     <span class=\"token operator\">=</span> <span class=\"token string\">\"gameState\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> supported <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">localStorageSupported</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>storage <span class=\"token operator\">=</span> supported <span class=\"token operator\">?</span> window<span class=\"token punctuation\">.</span>localStorage <span class=\"token operator\">:</span> window<span class=\"token punctuation\">.</span>fakeStorage<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//对supported进行判断（supported下面有定义），返回true使用window.localStorage，否则使用window.fakeStorage。</span></code></pre></div>\n<p>这里涉及了supported与window.fakeStorage。下文一一介绍。</p>\n<p>通过查找方法在原型链找到了this.localStorageSupported的定义（也就是上文的supported），用途是为了测试浏览器是否支持window.localStorage。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token class-name\">LocalStorageManager</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span> <span class=\"token function-variable function\">localStorageSupported</span><span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> testKey <span class=\"token operator\">=</span> <span class=\"token string\">\"test\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> storage <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>localStorage<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      storage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span>testKey<span class=\"token punctuation\">,</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      storage<span class=\"token punctuation\">.</span><span class=\"token function\">removeItem</span><span class=\"token punctuation\">(</span>testKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span></code></pre></div>\n<p>使用try..catch语句测试storage.setItem和storage.removeItem，来确保浏览器支持window.localStorage，执行成功返回true，否则执行catch里面的语句返回false。</p>\n<p>fakeStorage就是作者自己写的一个localStorage的替代方法，也定义了setItem方法，getItem方法和removeItem方法。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">window<span class=\"token punctuation\">.</span>fakeStorage <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    _data<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token function-variable function\">setItem</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">id<span class=\"token punctuation\">,</span> val</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_data<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token function-variable function\">getItem</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_data<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_data<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token function-variable function\">removeItem</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">delete</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_data<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token function-variable function\">clear</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>最后使用了 JSON.parse()和JSON.stringify()。</p>\n<p>JSON.parse() 方法将JSON 字符串解析成为 JavaScript 中对应的基本数据类型。</p>\n<p>JSON.stringify() 方法将任意JavaScript 对应的基本数据类型序列化成 JSON 字符串。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token class-name\">LocalStorageManager</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getGameState</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> stateJSON <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>storage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>gameStateKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> stateJSON <span class=\"token operator\">?</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>stateJSON<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token class-name\">LocalStorageManager</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">setGameState</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">gameState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>storage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>gameStateKey<span class=\"token punctuation\">,</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>gameState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>阅读完local<em>storage</em>manager.js，了解其不仅保存了分数，还保存了游戏状态。由此local<em>storage</em>manager.js会被经常调用，罗列一下调用情况：</p>\n<p>game_manager.js中调用过</p>\n<ul>\n<li>LocalStorageManager.getBestScore</li>\n<li>LocalStorageManager.setBestScore</li>\n<li>LocalStorageManager.setGameState</li>\n<li>LocalStorageManager.clearGameState</li>\n<li>LocalStorageManager.setBestScore</li>\n</ul>\n<p>grid.js调用</p>\n<ul>\n<li>LocalStorageManager.setBestScore</li>\n</ul>","frontmatter":{"title":"2048源代码解读（3）","date":"August 18, 2015"},"fields":{"slug":"/2015-08-18-2048-local-storage-manager/"}}},"pageContext":{"slug":"/2015-08-18-2048-local-storage-manager/","previous":{"fields":{"slug":"/2015-08-14-2048-input-mannager/"},"frontmatter":{"title":"2048源代码解读（2）","tags":["源码阅读"]}},"next":{"fields":{"slug":"/2015-08-19-read-source-code-of-2048-4/"},"frontmatter":{"title":"2048源代码解读（4）","tags":["源码阅读"]}}}}}